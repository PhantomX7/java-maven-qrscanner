/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.phantomdeveloper.qrscannermaven;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import com.phantomdeveloper.qrscannermaven.util.DbConn;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Phantom
 */
public class FrmMain extends javax.swing.JFrame implements Runnable, ThreadFactory {

    /**
     * Creates new form FrmMain
     */
    enum Status {
        SIGN_IN, SIGN_OUT;
    }
    private Status status = Status.SIGN_IN;

    private Connection myConn = null;
    private PreparedStatement myStmt = null;
    private ResultSet myRs = null;
    private Executor executor = Executors.newSingleThreadExecutor(this);
    private Webcam webcam = null;
    private WebcamPanel webPanel = null;

    private boolean waiting = true;
    private int waitingCounter = 0;
    private boolean greeting = false;
    private int greetCounter = 0;

    public FrmMain() {
        initComponents();
        setTitle("Qr Code Scanner");
        setResizable(false);
        setLocationRelativeTo(null);

        Dimension size = new Dimension(640, 480);

        webcam = Webcam.getWebcams().get(0);
        webcam.setViewSize(size);

        webPanel = new WebcamPanel(webcam);
        webPanel.setPreferredSize(size);
        webPanel.setFPSDisplayed(true);

        jPanel1.add(webPanel);
        executor.execute(this);
        connectDatabase();
    }

    private void connectDatabase() {
        try {
            myConn = DriverManager.getConnection(DbConn.JDBC_URL, DbConn.JDBC_USERNAME, DbConn.JDBC_PASSWORD);
        } catch (SQLException ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnSignIn = new javax.swing.JButton();
        btnSignOut = new javax.swing.JButton();
        lblStatus = new javax.swing.JLabel();
        lblText = new javax.swing.JLabel();
        lblGreet = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(104, 240, 240));
        jPanel1.setPreferredSize(new java.awt.Dimension(640, 420));
        jPanel1.setLayout(new java.awt.CardLayout());

        btnSignIn.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        btnSignIn.setText("Sign in");
        btnSignIn.setEnabled(false);
        btnSignIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignInActionPerformed(evt);
            }
        });

        btnSignOut.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        btnSignOut.setText("Sign out");
        btnSignOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSignOutActionPerformed(evt);
            }
        });

        lblStatus.setFont(new java.awt.Font("Calibri", 0, 48)); // NOI18N
        lblStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblStatus.setText("Scan to sign in");

        lblText.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        lblText.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblText.setText("waiting");

        lblGreet.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        lblGreet.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSignIn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSignOut, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addComponent(lblText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblGreet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(75, 75, 75)
                        .addComponent(lblText, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblGreet, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(btnSignIn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSignOut, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSignInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignInActionPerformed
        try {
            if (JOptionPane.showInputDialog(this, "input password").equals("admin")) {
                btnSignIn.setEnabled(false);
                btnSignOut.setEnabled(true);
                lblStatus.setText("Scan to sign in");
                status = Status.SIGN_IN;
            } else {
                JOptionPane.showMessageDialog(this, "you dont have privilege");
            }
        } catch (NullPointerException e) {

        }
    }//GEN-LAST:event_btnSignInActionPerformed

    private void btnSignOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSignOutActionPerformed
        try {
            if (JOptionPane.showInputDialog(this, "input password").equals("admin")) {
                btnSignIn.setEnabled(true);
                btnSignOut.setEnabled(false);
                lblStatus.setText("Scan to sign out");
                status = Status.SIGN_OUT;
            } else {
                JOptionPane.showMessageDialog(this, "you dont have privilege");
            }
        } catch (NullPointerException e) {

        }
    }//GEN-LAST:event_btnSignOutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSignIn;
    private javax.swing.JButton btnSignOut;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblGreet;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblText;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        do {
            try {
                Thread.sleep(100);
                checkWaiting();
                checkGreeting();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            Result result = null;
            BufferedImage image = null;

            if (webcam.isOpen()) {
                if ((image = webcam.getImage()) == null) {
                    continue;
                }
                LuminanceSource source = new BufferedImageLuminanceSource(image);
                BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

                try {
                    result = new MultiFormatReader().decode(bitmap);
                } catch (NotFoundException e) {
                    // fall thru, it means there is no QR code in image
                }
            }

            if (result != null) {
                int length = result.getText().length();
                String key = result.getText().substring(length - 32, length);
                generateResult(key);
            }
        } while (true);
    }

    private void checkWaiting() {
        if (waiting) {
            waitingCounter++;
            if (waitingCounter % 8 == 0) {
                lblText.setText(lblText.getText().toString() + ".");
            }
            if (lblText.getText().toString().equals("waiting.....")) {
                lblText.setText("waiting");
            }
        } else {
            waitingCounter++;
            if (waitingCounter == 20) {
                lblText.setText("waiting");
                waiting = true;
            }
        }
    }

    private void checkGreeting() {
        if (greeting) {
            greetCounter++;
            if (greetCounter == 30) {
                greeting = false;
                lblGreet.setText("");
            }
        }
    }

    private void generateResult(String key) {
        try {
            // Prepare statement
            myStmt = myConn.prepareStatement("select * from peserta where peserta.key=?");
            myStmt.setString(1, key);
            // Execute SQL query
            myRs = myStmt.executeQuery();
            // Process result set
            if (myRs.isBeforeFirst()) {
                while (myRs.next()) {
                    switch (status) {
                        case SIGN_IN:
                            if (!myRs.getBoolean("sign_in")) {
                                lblText.setText("Signed in");
                                greetSignIn(myRs.getString("nama"));
                                signIn(key);
                            } else {
                                lblText.setText("You had signed in");
                            }
                            resetWait();
                            break;
                        case SIGN_OUT:
                            if (!myRs.getBoolean("sign_out")) {
                                lblText.setText("Signed out");
                                greetSignOut(myRs.getString("nama"));
                                signOut(key);
                            } else {
                                lblText.setText("You had signed out");
                            }
                            resetWait();
                            break;
                    }

                }
            } else {
                lblText.setText("Invalid qr code...");
                resetWait();
            }
            myStmt.close();
            myRs.close();
        } catch (SQLException ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void resetWait() {
        waiting = false;
        waitingCounter = 0;
    }

    private void greetSignIn(String nama) {
        lblGreet.setText("Welcome " + nama);
        greeting = true;
    }

    private void greetSignOut(String nama) {
        lblGreet.setText("Thank you " + nama + ", for paticipating");
        greeting = true;
    }

    private void signIn(String key) {
        try {
            myStmt = myConn.prepareStatement("UPDATE `scrum`.`peserta` SET `sign_in`='1' WHERE `key`=?;");
            myStmt.setString(1, key);
            // Execute SQL query
            myStmt.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void signOut(String key) {
        try {
            myStmt = myConn.prepareStatement("UPDATE `scrum`.`peserta` SET `sign_out`='1' WHERE `key`=?;");
            myStmt.setString(1, key);
            // Execute SQL query
            myStmt.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "example-runner");
        t.setDaemon(true);
        return t;
    }
}
